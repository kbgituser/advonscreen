@page "/"
@page "/{PointId:int}"
@*<h1>Hello, world!</h1>
    <SurveyPrompt Title="How is Blazor working for you?" />*@


@{
    string pointScreen="", height, width;
    @if (CurrentAdvertisement != null)
    {
        pointScreen = "font-size: " + CurrentAdvertisement.FontSize + "px;";
        width = CurrentAdvertisement.Point.Width + "px;";
        height = CurrentAdvertisement.Point.Height + "px;";
        pointScreen += "width: " + width;
        pointScreen += "max-width: " + width;
        pointScreen += "min-width: " + width;
        pointScreen += "height: " + height;
        pointScreen += "max-height: " + height;
        pointScreen += "min-height: " + height;
    }
}

<style>

    #screenEmulator {
    }

    .PointScreen {
        /*overflow: hidden;*/
        /*-ms-overflow-style: none;*/ /* IE and Edge */
        /*scrollbar-width: none;*/ /* Firefox */
        /*-ms-overflow-style: none;*/ /* Internet Explorer 10+ */
        /*position: absolute;*/
        display: inline-block;
        overflow: hidden;
    }

        .PointScreen::-webkit-scrollbar {
            display: none;
        }
</style>
@*width="1920" height="1080"*@

<div class="PointScreen" style="@pointScreen">
    @((MarkupString)advText)
</div>
@using Dal.Data;
@using Dal.Models;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.WebUtilities;

@inject NavigationManager NavManager
@inject Dal.Data.ApplicationDbContext context



@code {
    [Parameter]
    public int PointId { get; set; }
    private string advText;
    public Point Point { get; set; }
    public Advertisement CurrentAdvertisement { get; set; }
    public Advertisement NextAdvertisement { get; set; }
    public int AdvertisementDuration { get; set; }


    protected override void OnInitialized()
    {
        //Point = context.Points.FirstOrDefault();
        //SetNextAdvertisement(null);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Point = context.Points.AsNoTracking().FirstOrDefault();
            SetNextAdvertisement(null);
            StartShow();
        }
    }

    private void StartShow()
    {
        if (Point == null)
            Point = GetPoint();

        var spareAd = new Advertisement();
        spareAd.PointId = Point.Id;
        spareAd.Point = Point;
        spareAd.Text = "<div class='text-center'>На данный момент объявлений нет</div>";
        spareAd.Duration = 10;
        spareAd.FontSize = Point.RecommendedFontSize;

        while (Point.TurnedOn)
        {
            SetNextAdvertisement(spareAd);
            if (CurrentAdvertisement != null)
            {
                InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }

            if (CurrentAdvertisement != null)
            {
                Task.Delay(CurrentAdvertisement.Duration * 1000).Wait();
            }
            //else
            //{
            //    advText = spareAd.Text;
            //    InvokeAsync(() =>
            //    {
            //        StateHasChanged();
            //    });                
            //    Task.Delay(spareAd.Duration * 1000).Wait();
            //}

            // подумать как обновлять состояние
            Point = GetPoint();
        }
        if (!Point.TurnedOn)
        {
            advText = "Показ объявлений по техническим причинам приостановлен";
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
            Task.Delay(30000).Wait();
        }
        StartShow();
    }
    public Point GetPoint()
    {

        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        //int PointIdint = Convert.ToInt32(PointId);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("PointId", out var _pointId))
        {
            //currentCount = Convert.ToInt32(=_initialCount);
            //PointIdint = Convert.ToInt32(_pointId);
        }
        if (PointId != 0)
        {
            var resultPoint = context.Points.Where(p => p.Id == PointId).AsNoTracking().FirstOrDefault();
            if (resultPoint == null)
                return context.Points.AsNoTracking().FirstOrDefault();
        }
        return context.Points.AsNoTracking().FirstOrDefault();
    }

    private void SetNextAdvertisement(Advertisement spareAd)
    {
        if (NextAdvertisement != null)
        {
            CurrentAdvertisement = NextAdvertisement;
            NextAdvertisement = GetNext();
        }
        else
        {
            CurrentAdvertisement = GetNext();
            NextAdvertisement =  GetNext();
        }
        if (CurrentAdvertisement == null && spareAd !=null) CurrentAdvertisement = spareAd;

        advText = (CurrentAdvertisement != null) ? CurrentAdvertisement.Text : "";
    }


    public Advertisement GetNext()
    {
        Advertisement result;
        if (CurrentAdvertisement == null)
        {
            result = GetFirstAdvertisement();
            return result;
        }
        var advs = context.Advertisements.Where(a => a.Point == Point && a.AdvertisementStatus.Name == "Active" && a.StartDate > CurrentAdvertisement.StartDate).OrderBy(a => a.StartDate).AsNoTracking();
        //advs = advs.Where(elem => elem.CreateDate > CurrentAdvertisement.CreateDate).OrderBy(a=>a.CreateDate).AsNoTracking();
        if (advs.Any())
        {
            result = advs.Where(elem => elem.StartDate > CurrentAdvertisement.StartDate).Include(a=>a.Point).AsNoTracking().FirstOrDefault(); // faster than try-catch
        }
        else
        {
            result = GetFirstAdvertisement();
        }
        return result;
    }

    public Advertisement GetFirstAdvertisement()
    {
        return context.Advertisements.Where(a => a.Point == Point&& a.AdvertisementStatus.Name=="Active").OrderBy(a => a.StartDate).Include(a=>a.Point).AsNoTracking().FirstOrDefault();
    }



}